import { useState, useEffect } from "react";
import { supabase } from "@/integrations/supabase/client";
import { Bill, Product, Farmer, BillItem } from "@/types";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Plus, Receipt, Trash2, Printer } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface BillItemForm {
  product_id: string;
  quantity: number;
  unit_price: number;
}

const BillingManagement = () => {
  const [bills, setBills] = useState<Bill[]>([]);
  const [farmers, setFarmers] = useState<Farmer[]>([]);
  const [products, setProducts] = useState<Product[]>([]);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [selectedFarmerId, setSelectedFarmerId] = useState("");
  const [billItems, setBillItems] = useState<BillItemForm[]>([]);
  const [discountAmount, setDiscountAmount] = useState(0);
  const [dueDate, setDueDate] = useState("");
  const { toast } = useToast();

  useEffect(() => {
    fetchBills();
    fetchFarmers();
    fetchProducts();
    
    // Real-time subscription
    const subscription = supabase
      .channel('bills-changes')
      .on('postgres_changes', { event: '*', schema: 'public', table: 'bills' }, () => {
        fetchBills();
      })
      .subscribe();

    return () => {
      supabase.removeChannel(subscription);
    };
  }, []);

  const fetchBills = async () => {
    try {
      const { data, error } = await supabase
        .from('bills')
        .select(`
          *,
          farmer:farmers(*),
          bill_items(*, product:products(*))
        `)
        .order('created_at', { ascending: false });

      if (error) throw error;
      setBills(data || []);
    } catch (error) {
      console.error('Error fetching bills:', error);
      toast({
        title: "Error",
        description: "Failed to fetch bills",
        variant: "destructive"
      });
    }
  };

  const fetchFarmers = async () => {
    try {
      const { data, error } = await supabase
        .from('farmers')
        .select('*')
        .order('name');

      if (error) throw error;
      setFarmers(data || []);
    } catch (error) {
      console.error('Error fetching farmers:', error);
    }
  };

  const fetchProducts = async () => {
    try {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .order('name');

      if (error) throw error;
      setProducts(data || []);
    } catch (error) {
      console.error('Error fetching products:', error);
    }
  };

  const addBillItem = () => {
    setBillItems([...billItems, { product_id: "", quantity: 1, unit_price: 0 }]);
  };

  const removeBillItem = (index: number) => {
    setBillItems(billItems.filter((_, i) => i !== index));
  };

  const updateBillItem = (index: number, field: keyof BillItemForm, value: any) => {
    const updatedItems = [...billItems];
    updatedItems[index] = { ...updatedItems[index], [field]: value };
    
    // Auto-fill unit price when product is selected
    if (field === 'product_id') {
      const selectedProduct = products.find(p => p.id === value);
      if (selectedProduct) {
        updatedItems[index].unit_price = selectedProduct.price_per_unit;
      }
    }
    
    setBillItems(updatedItems);
  };

  const calculateTotal = () => {
    const subtotal = billItems.reduce((sum, item) => sum + (item.quantity * item.unit_price), 0);
    return subtotal - discountAmount;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!selectedFarmerId || billItems.length === 0) {
      toast({
        title: "Error",
        description: "Please select a farmer and add at least one item",
        variant: "destructive"
      });
      return;
    }

    try {
      const totalAmount = billItems.reduce((sum, item) => sum + (item.quantity * item.unit_price), 0);
      const finalAmount = totalAmount - discountAmount;

      // Create bill (bill_number will be auto-generated by trigger)
      const { data: billData, error: billError } = await supabase
        .from('bills')
        .insert({
          farmer_id: selectedFarmerId,
          total_amount: totalAmount,
          discount_amount: discountAmount,
          final_amount: finalAmount,
          due_date: dueDate || null,
          bill_number: '' // Will be overridden by trigger
        })
        .select()
        .single();

      if (billError) throw billError;

      // Create bill items
      const billItemsData = billItems.map(item => ({
        bill_id: billData.id,
        product_id: item.product_id,
        quantity: item.quantity,
        unit_price: item.unit_price,
        total_price: item.quantity * item.unit_price
      }));

      const { error: itemsError } = await supabase
        .from('bill_items')
        .insert(billItemsData);

      if (itemsError) throw itemsError;

      // Update product stock
      for (const item of billItems) {
        const { data: product } = await supabase
          .from('products')
          .select('stock_quantity')
          .eq('id', item.product_id)
          .single();

        if (product) {
          const { error: stockError } = await supabase
            .from('products')
            .update({ 
              stock_quantity: product.stock_quantity - item.quantity
            })
            .eq('id', item.product_id);

          if (stockError) throw stockError;
        }
      }

      toast({
        title: "Success",
        description: "Bill created successfully"
      });

      resetForm();
      setIsDialogOpen(false);
    } catch (error) {
      console.error('Error creating bill:', error);
      toast({
        title: "Error",
        description: "Failed to create bill",
        variant: "destructive"
      });
    }
  };

  const resetForm = () => {
    setSelectedFarmerId("");
    setBillItems([]);
    setDiscountAmount(0);
    setDueDate("");
  };

  const getPaymentStatusBadge = (status: string) => {
    switch (status) {
      case 'paid':
        return <Badge variant="default" className="bg-green-100 text-green-800">Paid</Badge>;
      case 'partial':
        return <Badge variant="secondary">Partial</Badge>;
      default:
        return <Badge variant="destructive">Pending</Badge>;
    }
  };

  const printBill = (bill: Bill) => {
    const printWindow = window.open('', '_blank');
    if (!printWindow) return;

    const printContent = `
      <html>
        <head>
          <title>Bill - ${bill.bill_number}</title>
          <style>
            body { font-family: Arial, sans-serif; padding: 20px; }
            .header { text-align: center; margin-bottom: 20px; }
            .bill-info { margin-bottom: 20px; }
            table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
            th { background-color: #f2f2f2; }
            .total { text-align: right; font-weight: bold; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>FarmAgro</h1>
            <h2>Invoice</h2>
          </div>
          <div class="bill-info">
            <p><strong>Bill Number:</strong> ${bill.bill_number}</p>
            <p><strong>Date:</strong> ${new Date(bill.created_at).toLocaleDateString()}</p>
            <p><strong>Customer:</strong> ${bill.farmer?.name}</p>
            <p><strong>Phone:</strong> ${bill.farmer?.phone || 'N/A'}</p>
          </div>
          <table>
            <thead>
              <tr>
                <th>Item</th>
                <th>Quantity</th>
                <th>Unit Price</th>
                <th>Total</th>
              </tr>
            </thead>
            <tbody>
              ${bill.bill_items?.map(item => `
                <tr>
                  <td>${item.product?.name}</td>
                  <td>${item.quantity} ${item.product?.unit}</td>
                  <td>₹${item.unit_price}</td>
                  <td>₹${item.total_price}</td>
                </tr>
              `).join('') || ''}
            </tbody>
          </table>
          <div class="total">
            <p><strong>Subtotal: ₹${bill.total_amount}</strong></p>
            <p><strong>Discount: ₹${bill.discount_amount}</strong></p>
            <p><strong>Final Total: ₹${bill.final_amount}</strong></p>
          </div>
        </body>
      </html>
    `;

    printWindow.document.write(printContent);
    printWindow.document.close();
    printWindow.print();
  };

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2">
            <Receipt className="h-5 w-5" />
            Billing Management
          </CardTitle>
          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
            <DialogTrigger asChild>
              <Button onClick={resetForm}>
                <Plus className="h-4 w-4 mr-2" />
                Create Bill
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle>Create New Bill</DialogTitle>
              </DialogHeader>
              <form onSubmit={handleSubmit} className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="farmer">Select Farmer *</Label>
                    <Select value={selectedFarmerId} onValueChange={setSelectedFarmerId}>
                      <SelectTrigger>
                        <SelectValue placeholder="Choose farmer" />
                      </SelectTrigger>
                      <SelectContent>
                        {farmers.map((farmer) => (
                          <SelectItem key={farmer.id} value={farmer.id}>
                            {farmer.name} {farmer.phone && `(${farmer.phone})`}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label htmlFor="dueDate">Due Date</Label>
                    <Input
                      id="dueDate"
                      type="date"
                      value={dueDate}
                      onChange={(e) => setDueDate(e.target.value)}
                    />
                  </div>
                </div>

                <div>
                  <div className="flex items-center justify-between mb-2">
                    <Label>Bill Items</Label>
                    <Button type="button" onClick={addBillItem} size="sm">
                      <Plus className="h-4 w-4 mr-1" />
                      Add Item
                    </Button>
                  </div>
                  
                  {billItems.map((item, index) => (
                    <div key={index} className="grid grid-cols-5 gap-2 items-end mb-2">
                      <div>
                        <Select 
                          value={item.product_id} 
                          onValueChange={(value) => updateBillItem(index, 'product_id', value)}
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Select product" />
                          </SelectTrigger>
                          <SelectContent>
                            {products.map((product) => (
                              <SelectItem key={product.id} value={product.id}>
                                {product.name} (₹{product.price_per_unit}/{product.unit})
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                      
                      <Input
                        type="number"
                        placeholder="Qty"
                        value={item.quantity}
                        onChange={(e) => updateBillItem(index, 'quantity', parseFloat(e.target.value) || 0)}
                      />
                      
                      <Input
                        type="number"
                        step="0.01"
                        placeholder="Unit Price"
                        value={item.unit_price}
                        onChange={(e) => updateBillItem(index, 'unit_price', parseFloat(e.target.value) || 0)}
                      />
                      
                      <div className="text-sm font-medium">
                        ₹{(item.quantity * item.unit_price).toFixed(2)}
                      </div>
                      
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={() => removeBillItem(index)}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  ))}
                </div>

                <div className="border-t pt-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="discount">Discount Amount</Label>
                      <Input
                        id="discount"
                        type="number"
                        step="0.01"
                        value={discountAmount}
                        onChange={(e) => setDiscountAmount(parseFloat(e.target.value) || 0)}
                      />
                    </div>
                    <div className="text-right">
                      <p className="text-lg font-bold">Total: ₹{calculateTotal().toFixed(2)}</p>
                    </div>
                  </div>
                </div>

                <div className="flex justify-end gap-2">
                  <Button type="button" variant="outline" onClick={() => setIsDialogOpen(false)}>
                    Cancel
                  </Button>
                  <Button type="submit">Create Bill</Button>
                </div>
              </form>
            </DialogContent>
          </Dialog>
        </div>
      </CardHeader>
      <CardContent>
        <div className="rounded-md border">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Bill Number</TableHead>
                <TableHead>Farmer</TableHead>
                <TableHead>Date</TableHead>
                <TableHead>Amount</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {bills.map((bill) => (
                <TableRow key={bill.id}>
                  <TableCell className="font-medium">{bill.bill_number}</TableCell>
                  <TableCell>{bill.farmer?.name}</TableCell>
                  <TableCell>{new Date(bill.created_at).toLocaleDateString()}</TableCell>
                  <TableCell>₹{bill.final_amount}</TableCell>
                  <TableCell>{getPaymentStatusBadge(bill.payment_status)}</TableCell>
                  <TableCell>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => printBill(bill)}
                    >
                      <Printer className="h-4 w-4" />
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
      </CardContent>
    </Card>
  );
};

export default BillingManagement;